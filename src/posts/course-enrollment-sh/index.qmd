---
title: "Course catalogues 1"
description: |
  Forecasting course enrollment using historical data.
categories:
  - Interactive visualization
date: today
author: Jonathan St-Onge
editor: visual
title-block-banner: true
title-block-banner-color: "whitesmoke"
image: llama.png        
---

```{r}
#| label: set-up
#| echo: false
#| message: false
#| warning: false

library(here)
library(rstanarm)
library(cowplot)
library(MASS)
library(ggtext)
library(bayesplot)
library(tidyverse)

set.seed(123)
```

We go through department-level stuff, then dig into course-level plots.

### Loading the data

```{r}
#| label: data
#| code-summary: "Data Wranling"
#| code-fold: true
#| message: false

d <- arrow::read_parquet("course_catalogue_tidy.parquet")
raw_d1985 <- arrow::read_parquet("cc-1985.parquet")

chosen_depts <- c("MATH", "SOC", "BSAD", "CS", "ANTH", "CDAE", "NR", "CSYS", "STAT", "PHIL")
d <- subset(d, dept %in% chosen_depts)

tidy_d <- d |>
    arrange(course_id, year) |>
    mutate(
      before_noon = ifelse(as.integer(str_extract(start_time, "^[0-9][0-9]")) < 12, "am", "pm"),
      course_lab = paste(dept, cn, sep="_")
    )

tidy_d <- tidy_d |> 
    left_join(tidy_d |> 
        group_by(course_id) |> 
        filter(rank(year, ties.method="last")==1) |> 
        select(year, course_id, title), 
    by=c("course_id"), suffix=c("", "_first"))

# might be an issue in some cases, e.g.
# tidy_d |> filter(dept == "MATH", cn_ord == 1, title_first == "ST:\nCalculus\nII")
tidy_d <- tidy_d |> 
    left_join(tidy_d |> 
        group_by(dept, instructor_last) |> 
        filter(rank(year, ties.method="last")==1) |> 
        select(year, instructor_last, dept), 
    by=c("instructor_last", "dept"), suffix=c("", "_first_inst"))

tidy_d$new_instructor  <- ifelse(
  tidy_d$year == 1995, 0, 
  as.integer(tidy_d$year_first_inst == tidy_d$year)
)

tidy_d$title <- str_wrap(tidy_d$title, width = 10)

agg_title <- tidy_d |>
  group_by(year, title) |>
  mutate(
    current_enrollment = sum(current_enrollment)
  )

raw_d1985$Number <- purrr::map_chr(raw_d1985$Number, ~str_flatten(.x, ", "))

ojs_define(data=tidy_d)
ojs_define(agg_dat=agg_title)
ojs_define(d1985=raw_d1985)
```

```{r}
#| echo: false
knitr::kable(tidy_d |> select(-title, -title_first) |> head())
```  

## The full time series

We don't see much.

```{ojs}
//| code-fold: true

data_t = transpose(data)

Plot.plot({
  width: 900,
  height: 300,
  marginLeft: 300,
  y: { grid: true },
  marks: [
    Plot.ruleY([d3.mean(data_t, d=>d.current_enrollment)], { stroke: "red", symbol: "new_instructor", strokeDasharray: 3 }),
    Plot.dot(data_t, 
      {x: "year", y: "current_enrollment"}, { stroke: "black" }
    )
  ]}
)
```

## Department level

Already better, we can see some trends going on. The dotted line is the average number of enrollment across departments, but within course-level. We can also differentiate between course-level (<100,<200,<300,<400). I am using colors to encode when the course was first offered (dark purple $= 1995$; yellow $=2020$). Symbols indicate whether the class was given by a new instructor, i.e. if it is the same year than the instructor shows up in the data within department (this is still work in progress, i need to improve that):


```{ojs}
//| echo: false
viewof selcn = Inputs.select([1,2,3,4], {label: "Select Course-lvl"})
```

```{ojs}
//| code-fold: true
{
    return Plot.plot((() => {
      const n = 2; // number of facet columns
      const keys = Array.from(d3.union(data_t.filter(d => d.cn_ord == selcn).map((d) => d.dept)));
      const index = new Map(keys.map((key, i) => [key, i]));
      const fx = (key) => index.get(key) % n;
      const fy = (key) => Math.floor(index.get(key) / n);
      return {
        marginLeft: 200,
        style: {
          backgroundColor: '#F5F5F5',
          color: 'black',
        },
        height: 1200,
        width: 1000,
        grid: true,
        x: { nice: true },
        y: { insetTop: 10 },
        fx: {padding: 0.03, axis: null},
        fy: { grid: true, axis: null },
        color: {
          backgroundColor: '#F5F5F5',
          label: "First year",
          type: "threshold",
          scheme: "Viridis",
          domain: d3.range(1995, 2025, 5),
          legend: true
        },
        marks: [
          Plot.ruleY([d3.mean(data_t.filter(d => d.cn_ord == selcn), d=>d.current_enrollment)], { stroke: "black", strokeDasharray: 3 }),
          Plot.dot(data_t.filter(d => d.cn_ord == selcn), {
            x: "year",
            y: "current_enrollment",
            fill: "year_first",
            symbol: "new_instructor",
            opacity: 0.5, 
            fx: (d) => fx(d.dept),
            fy: (d) => fy(d.dept), 
            tip: true,
            title: d => `Course title: ${d.title} (cn: ${d.cn})\nEnrollment: ${d.current_enrollment}\nInstructor: ${d.instructor}`
          }),
          Plot.text(keys, {fx, fy, frameAnchor: "top-left", dx: 6, dy: 6}),
          Plot.frame()
        ]
      };
  })())

}
```

## Course level

We can also pick the department her (for now there are just the 9 departments below, i'll add more at some point).

```{ojs}
//| echo: false
viewof select = Inputs.select(["MATH", "SOC", "BSAD", "CS", "ANTH", "CDAE", "NR", "CSYS", "STAT", "PHIL"], {label: "Select dept"})
viewof selcn2 = Inputs.select([1,2,3,4], {label: "Select Course-lvl"})
viewof selcn3 = Inputs.select(new Map([["Spring", 1], ["Fall", 9], ["Both", 999]]), {label: "Select Semester"})
```

```{ojs}
//| code-fold: true
{
    let data_f = data_t.filter(d => 
      (
        d.dept==select && d.cn_ord==selcn2 && d.month == (selcn3 == 999 ? d.month : selcn3)
      ))
    return Plot.plot((() => {
    const n = 3; // number of facet columns
    const keys = Array.from(d3.union(data_f.map((d) => d.title)));
    const index = new Map(keys.map((key, i) => [key, i]));
    const fx = (key) => index.get(key) % n;
    const fy = (key) => Math.floor(index.get(key) / n);
    return {
      height: keys.length > 60 ? 2500 : (keys.length > 20 ? 1800 : 900),
      width: 1200,
      style: {
          backgroundColor: '#F5F5F5',
          color: 'black',
      },
      grid: true,
      x: {nice: true},
      // axis: null,
      y: {insetTop: 10},
      fx: { padding: 0.03, axis:null },
      fy: { grid: true, axis: null },
      color: {
          backgroundColor: '#F5F5F5',
          label: "First year",
          type: "threshold",
          scheme: "Viridis",
          domain: d3.range(1995, 2025, 5),
          legend: true
        },
      marks: [
        Plot.ruleY([d3.mean(data_t.filter(d => d.cn_ord==selcn2), d=>d.current_enrollment)], { stroke: "black", strokeDasharray: 3 }),
        Plot.dot(data_f, {
          x: "year",
          y: "current_enrollment",
          fill: "year_first",
          symbol: "new_instructor",
          opacity: 0.5,
          fx: (d) => fx(d.title),
          fy: (d) => fy(d.title),
          tip: true,
          title: d => `Course title: ${d.title} (cn: ${d.cn})\nEnrollment: ${d.current_enrollment}\nInstructor: ${d.instructor}`
        }),
        Plot.text(keys, {fx, fy, frameAnchor: "top-left", dx: 6, dy: 6}),
        Plot.frame()
      ]
    };
  })())
}
```

```{ojs}
//| echo: false
function onlyUnique(value, index, array) {
  return array.indexOf(value) === index;
}
```

## Course description (UVM 1985 only)

```{r}
#| echo: false
rmarkdown::paged_table(raw_d1985)
```



